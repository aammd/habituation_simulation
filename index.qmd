---
title: "Habituation simulation"
subtitle: "Simulations to measure the performance of a nonlinear model of habituation"
format: html
author: Andrew MacDonald
theme: minty
---

```{r setup, include = FALSE}
options(tidyverse.quiet = TRUE)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", tar_simple = TRUE)
library(brms)
library(tidyverse)
library(tidybayes)
```

```{r}
library(targets)
```

## Mathematical description

This document is created to validate the following model of Flight Initiation distance:

$$
\begin{align}
\text{FID} &\sim \text{Gamma}(\alpha, \alpha/\mu) \\
\mu &\sim M \times 1000 \times \left(1 - \frac{p \times X}{d + X} \right) \\
\text{logit}(M) &= M_0 + \beta_{M, i}\\
\text{logit}(p) &= p_0 + \beta_{p, i}\\
\text{log}(d)   &= d_0 + \beta_{d, i}\\
\begin{bmatrix}  \beta_{M} \  \beta_{p} \  \beta_{d} \end{bmatrix} &\sim N\left(\begin{bmatrix} 0 \ 0 \ 0 \end{bmatrix}, \Sigma\right) \\
\Sigma &= \text{diag}(\sigma_M, \sigma_p, \sigma_d) \times \text{R} \times \text{diag}(\sigma_M, \sigma_p, \sigma_d) \\
\sigma_M &\sim \text{Exponential}(4) \\
\sigma_p &\sim \text{Exponential}(2) \\
\sigma_d &\sim \text{Exponential}(2) \\
\text{R} &\sim \text{LKJ}(2) \\
M_0 &\sim N(0.5, 0.5)\\
p_0 &\sim N(-1, 0.2)\\
d_0 &\sim N(1.5, 0.5)\\
\alpha &\sim \text{Gamma}(6.25, .25)
\end{align}
$$


Begin by plotting the model's curve:

```{r one_curve}
tar_load(one_curve)
one_curve
```

```{r one_tamia_figure}
tar_load(one_sim_plot)
one_sim_plot
```


## Prior predictive simulations

define a model that matches the above in `brms`:

```{r}
tar_read(model_bf)
```

and define priors that correspond to this model as well:

```{r}
tar_read(model_priors)
```

start to plot the prior predictive distribution

```{r}
tar_load(model_prior_sim)

tibble::tibble(tamia_id = "un_tamia",
       num_obs = 1:20) |> 
  tidybayes::add_predicted_draws(model_prior_sim,
                                 ndraws = 15,
                                 seed = 1234) |> 
  ggplot2::ggplot(ggplot2::aes(x = num_obs, y = .prediction)) + 
  ggplot2::geom_point() + 
  ggplot2::facet_wrap(~.draw, ncol=5)
```




Yes I could probably use the prior predictive distribution to fit the model to every prior draw -- but tbh this is harder to think about.

```{r}
## simulate from priors to get model parameters
true_cor <- rethinking::rlkjcorr(1, K = 3, eta = 2)
true_sd_logd <- rexp(1, 2)
true_sd_logitM <- rexp(1, 4)
true_sd_logitp <- rexp(1, 2)
true_b_logd <- rnorm(1, 1.5, sd = .5)
true_b_logitM <- rnorm(1, .5, .5)
true_b_logitp <- rnorm(1, -1, .2)
true_shape <- rgamma(1, 6.25, .25)

```



